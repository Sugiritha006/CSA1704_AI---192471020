import itertools

def travelling_salesman(graph, start):
    # graph is adjacency matrix (2D list)
    n = len(graph)
    vertices = list(range(n))
    vertices.remove(start)

    min_path = float("inf")
    best_route = None

    # Try all permutations of other cities
    for perm in itertools.permutations(vertices):
        current_cost = 0
        k = start
        route = [start]

        for j in perm:
            current_cost += graph[k][j]
            k = j
            route.append(j)

        # return to start
        current_cost += graph[k][start]
        route.append(start)

        if current_cost < min_path:
            min_path = current_cost
            best_route = route

    return best_route, min_path


# Example run
if __name__ == "__main__":
    # Example: 4 cities
    graph = [[0, 10, 15, 20],
             [10, 0, 35, 25],
             [15, 35, 0, 30],
             [20, 25, 30, 0]]

    start_city = 0
    route, cost = travelling_salesman(graph, start_city)

    print("Optimal Route:", route)
    print("Minimum Cost:", cost)
o/p
Optimal Route: [0, 1, 3, 2, 0]
Minimum Cost: 80
